import {useState,useEffect} from "react"
import Head from 'next/head'
import { useFormik } from "formik";
import * as yup from 'yup';

const passwordRules = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{5,}$/; //regular expression

//create a validation schema (validation rules)
const fieldsSchema = yup.object().shape({
    email:yup.string().email('enter a valid email').required('Required'),
    password:yup.string().min(5).matches(passwordRules,{message:'Please create a stronger password'}).required('Required'),
    passwordConfirmation:yup.string().oneOf([yup.ref('password'),null],'password must match')

});

export default function profileUpdate() {
    const [screenHeight, setScreenHeight] = useState(0);

  useEffect(()=>{
    setScreenHeight(window.innerHeight - 60);
  },[])

   const {values, handleBlur, handleChange, errors, handleSubmit, touched } = useFormik({
    validationSchema:fieldsSchema,
    initialValues:{
        firstName:'',
        lastName:'',
        phoneNumber:'',
        address:'',
        dob:'',
        gender:''
    },
    onSubmit:(values)=>{
        console.log(values.firstName);
    }
  });
  return (
    <>
        <Head>
            <title>Page Title | Real Fast</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/realfast_logo.png" />
        </Head>
        <main className={styles.container} style={{height:`${screenHeight}px`}}>
            <div className={styles.wrapper}>
               <h2 className={styles.title}>Update Your Profile</h2>

                <form onSubmit={handleSubmit}>
                    <div>
                        <label className={styles.label} htmlFor="">Email address</label>
                        <input id="address" type="email" placeholder="valid email address" className={styles.inputField} value={values.email} onChange={handleChange} onBlur={handleBlur}/>
                        {errors.email && touched.email ? <p className={styles.formError} style={{color:'red'}}>{errors.address}</p> : null}
                    </div>

                    <div className={styles.inputBlockRow}>
                        <div className={styles.inputBlock}>
                            <label className={styles.label} htmlFor="">Create Password</label>
                            <input id="password" type="text" className={styles.inputField} value={values.password} onChange={handleChange} onBlur={handleBlur}/>
                            {errors.password && touched.password ? <p className={styles.formError} style={{color:'red'}}>{errors.password}</p> : null}
                        </div>
                        <div className={styles.inputBlock}>
                            <label className={styles.label}>Confirm Password</label>
                            <input id="password" type="text" className={styles.inputField} value={values.password} onChange={handleChange} onBlur={handleBlur}/>
                            {errors.gender && touched.gender ? <p className={styles.formError} style={{color:'red'}}>{errors.gender}</p> : null}
                        </div>
                    </div>
                    <button type="submit" className={styles.submitBtn}>UPDATE PROFILE</button>
                </form> 
            </div>
        </main>
    </>
  )
}

const styles={
  container:'w-full flex flex-col justify-center items-center px-16',
  wrapper:'md:w-full  flex flex-col gap-16',
}